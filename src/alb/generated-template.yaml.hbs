AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Resources:
    CertificateManagerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: "dashkite.io"
            SubjectAlternativeNames: 
              - "dashkite.io"
              - "*.dashkite.io"
            DomainValidationOptions: 
              - 
                DomainName: "dashkite.io"
                ValidationDomain: "dashkite.io"
              - 
                DomainName: "*.dashkite.io"
                ValidationDomain: "*.dashkite.io"
            CertificateTransparencyLoggingPreference: "ENABLED"

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: "arn:aws:lambda:us-east-1:618441030511:function:dashkite-development-origin-request"
            Principal: "elasticloadbalancing.amazonaws.com"
            SourceArn: !Sub "arn:aws:elasticloadbalancing:us-east-1:618441030511:targetgroup/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-router/98fe7ff0e53ce37f"

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "test-default-vpc"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - "subnet-5d133472"
              - "subnet-62848706"
              - "subnet-9b3c62a4"
              - "subnet-a58458aa"
              - "subnet-dcadf781"
              - "subnet-f8db35b2"
            SecurityGroups: 
              - "sg-f2f22384"
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.preserve_host_header.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_header_processing.mode"
                Value: "append"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateManagerCertificate
            DefaultActions: 
              - 
                TargetGroupArn: !Sub "arn:aws:elasticloadbalancing:us-east-1:618441030511:targetgroup/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-router/98fe7ff0e53ce37f"
                Type: "forward"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 35
            HealthCheckPath: "/ping"
            HealthCheckTimeoutSeconds: 30
            UnhealthyThresholdCount: 2
            TargetType: "lambda"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            Name: !Sub "${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}-router"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "lambda.multi_value_headers.enabled"
                Value: "false"
            Targets: 
              - 
                Id: "arn:aws:lambda:us-east-1:618441030511:function:dashkite-development-origin-request"
                AvailabilityZone: "all"

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.54.199"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.54.199"
                Primary: true
            SubnetId: "subnet-9b3c62a4"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface2:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.67.169"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.67.169"
                Primary: true
            SubnetId: "subnet-a58458aa"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface3:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.21.196"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.21.196"
                Primary: true
            SubnetId: "subnet-f8db35b2"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface4:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.92.169"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.92.169"
                Primary: true
            SubnetId: "subnet-5d133472"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface5:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.32.126"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.32.126"
                Primary: true
            SubnetId: "subnet-dcadf781"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

    EC2NetworkInterface6:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/4c524bb445f3a2e3"
            PrivateIpAddress: "172.31.12.47"
            PrivateIpAddresses: 
              - 
                PrivateIpAddress: "172.31.12.47"
                Primary: true
            SubnetId: "subnet-62848706"
            SourceDestCheck: true
            GroupSet: 
              - !Sub "${ElasticLoadBalancingV2LoadBalancer.SecurityGroups}"

